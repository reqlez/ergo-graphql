import { ErgoAddress } from "../models";
import { AddTokenOptions, TokensCollection } from "../models/collections/tokensCollection";
import { Amount, Base58String, Box, BoxCandidate, ErgoTree, NewToken, NonMandatoryRegisters, TokenAmount, UnsignedInput } from "../types";
export declare const SAFE_MIN_BOX_VALUE = 1000000n;
export declare class OutputBuilder {
    private readonly _value;
    private readonly _address;
    private readonly _tokens;
    private _creationHeight?;
    private _registers;
    private _minting?;
    constructor(value: Amount, recipient: Base58String | ErgoTree | ErgoAddress, creationHeight?: number);
    get value(): bigint;
    get address(): ErgoAddress;
    get ergoTree(): ErgoTree;
    get creationHeight(): number | undefined;
    get tokens(): TokensCollection;
    get additionalRegisters(): NonMandatoryRegisters;
    get minting(): NewToken<bigint> | undefined;
    addTokens(tokens: TokenAmount<Amount>[] | TokenAmount<Amount> | TokensCollection, options?: AddTokenOptions): this;
    mintToken(token: NewToken<Amount>): OutputBuilder;
    setCreationHeight(height: number, options?: {
        replace: boolean;
    }): OutputBuilder;
    setAdditionalRegisters(registers: NonMandatoryRegisters): OutputBuilder;
    eject(ejector: (context: {
        tokens: TokensCollection;
    }) => void): void;
    build(transactionInputs?: UnsignedInput[] | Box<Amount>[]): BoxCandidate<string>;
}
