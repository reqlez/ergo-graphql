import { InputsCollection } from "../../models";
import { Amount, Box, BoxCandidate, FilterPredicate, SortingDirection, SortingSelector, TokenTargetAmount } from "../../types";
import { ISelectionStrategy } from "./strategies/ISelectionStrategy";
import { SelectorFunction } from "./strategies/customSelectionStrategy";
export declare type SelectionTarget = {
    nanoErgs?: bigint;
    tokens?: TokenTargetAmount<bigint>[];
};
export declare class BoxSelector {
    private readonly _inputs;
    private _strategy?;
    private _ensureFilterPredicate?;
    private _inputsSortSelector?;
    private _inputsSortDir?;
    constructor(inputs: Box<bigint>[] | InputsCollection);
    defineStrategy(strategy: ISelectionStrategy | SelectorFunction): BoxSelector;
    select(target: SelectionTarget): Box<bigint>[];
    private _getUnreachedTargets;
    private _sort;
    ensureInclusion(predicate: FilterPredicate<Box<bigint>>): BoxSelector;
    orderBy(selector: SortingSelector<Box<bigint>>, direction?: SortingDirection): BoxSelector;
    private _isISelectionStrategyImplementation;
    static buildTargetFrom(boxes: Box<Amount>[] | BoxCandidate<Amount>[]): SelectionTarget;
}
