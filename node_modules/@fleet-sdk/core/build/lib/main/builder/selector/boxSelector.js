"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoxSelector = void 0;
const duplicateInputSelectionError_1 = require("../../errors/duplicateInputSelectionError");
const insufficientInputs_1 = require("../../errors/insufficientInputs");
const models_1 = require("../../models");
const arrayUtils_1 = require("../../utils/arrayUtils");
const bigIntUtils_1 = require("../../utils/bigIntUtils");
const boxUtils_1 = require("../../utils/boxUtils");
const objectUtils_1 = require("../../utils/objectUtils");
const accumulativeSelectionStrategy_1 = require("./strategies/accumulativeSelectionStrategy");
const customSelectionStrategy_1 = require("./strategies/customSelectionStrategy");
class BoxSelector {
    _inputs;
    _strategy;
    _ensureFilterPredicate;
    _inputsSortSelector;
    _inputsSortDir;
    constructor(inputs) {
        if (inputs instanceof models_1.InputsCollection) {
            this._inputs = inputs.toArray();
        }
        else {
            this._inputs = inputs;
        }
    }
    defineStrategy(strategy) {
        if (this._isISelectionStrategyImplementation(strategy)) {
            this._strategy = strategy;
        }
        else {
            this._strategy = new customSelectionStrategy_1.CustomSelectionStrategy(strategy);
        }
        return this;
    }
    select(target) {
        if (!this._strategy) {
            this._strategy = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        }
        const remaining = { ...target };
        let unselected = [...this._inputs];
        let selected;
        if ((0, objectUtils_1.isDefined)(this._ensureFilterPredicate)) {
            const predicate = this._ensureFilterPredicate;
            selected = unselected.filter(predicate);
            unselected = unselected.filter((input) => !predicate(input));
            if ((0, objectUtils_1.isDefined)(remaining.nanoErgs)) {
                remaining.nanoErgs -= (0, bigIntUtils_1.sumBy)(selected, (input) => input.value);
            }
            if ((0, objectUtils_1.isDefined)(remaining.tokens) && selected.some((input) => !(0, arrayUtils_1.isEmpty)(input.assets))) {
                remaining.tokens.forEach((tokenTarget) => {
                    if (tokenTarget.amount) {
                        tokenTarget.amount -= (0, boxUtils_1.sumByTokenId)(selected, tokenTarget.tokenId);
                    }
                });
            }
        }
        else {
            selected = [];
        }
        unselected = this._sort(unselected);
        selected = selected.concat(this._strategy.select(unselected, remaining));
        if ((0, arrayUtils_1.hasDuplicatesBy)(selected, (item) => item.boxId)) {
            throw new duplicateInputSelectionError_1.DuplicateInputSelectionError();
        }
        const unreached = this._getUnreachedTargets(selected, target);
        if ((0, arrayUtils_1.some)(unreached)) {
            throw new insufficientInputs_1.InsufficientInputs(unreached);
        }
        return selected;
    }
    _getUnreachedTargets(inputs, target) {
        const unreached = {};
        const selectedNanoergs = (0, bigIntUtils_1.sumBy)(inputs, (input) => input.value);
        if (target.nanoErgs && target.nanoErgs > selectedNanoergs) {
            unreached["nanoErgs"] = target.nanoErgs - selectedNanoergs;
        }
        if ((0, arrayUtils_1.isEmpty)(target.tokens)) {
            return unreached;
        }
        for (const tokenTarget of target.tokens) {
            const totalSelected = (0, boxUtils_1.sumByTokenId)(inputs, tokenTarget.tokenId);
            if ((0, objectUtils_1.isDefined)(tokenTarget.amount) && tokenTarget.amount > totalSelected) {
                unreached[tokenTarget.tokenId] = tokenTarget.amount - totalSelected;
            }
        }
        return unreached;
    }
    _sort(inputs) {
        if (!this._inputsSortSelector) {
            return (0, arrayUtils_1.orderBy)(inputs, (input) => input.creationHeight, "asc");
        }
        return (0, arrayUtils_1.orderBy)(inputs, this._inputsSortSelector, this._inputsSortDir || "asc");
    }
    ensureInclusion(predicate) {
        this._ensureFilterPredicate = predicate;
        return this;
    }
    orderBy(selector, direction) {
        this._inputsSortSelector = selector;
        this._inputsSortDir = direction;
        return this;
    }
    _isISelectionStrategyImplementation(obj) {
        if (obj.select) {
            return true;
        }
        return false;
    }
    static buildTargetFrom(boxes) {
        const tokens = {};
        let nanoErgs = 0n;
        for (const box of boxes) {
            nanoErgs += (0, bigIntUtils_1.toBigInt)(box.value);
            for (const token of box.assets) {
                tokens[token.tokenId] = (tokens[token.tokenId] || 0n) + (0, bigIntUtils_1.toBigInt)(token.amount);
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
exports.BoxSelector = BoxSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9ib3hTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0RkFBeUY7QUFDekYsd0VBQXlGO0FBQ3pGLHlDQUFnRDtBQVVoRCx1REFBaUY7QUFDakYseURBQTBEO0FBQzFELG1EQUFvRDtBQUNwRCx5REFBb0Q7QUFFcEQsOEZBQTJGO0FBQzNGLGtGQUFpRztBQUlqRyxNQUFhLFdBQVc7SUFDTCxPQUFPLENBQWdCO0lBQ2hDLFNBQVMsQ0FBc0I7SUFDL0Isc0JBQXNCLENBQWdDO0lBQ3RELG1CQUFtQixDQUFnQztJQUNuRCxjQUFjLENBQW9CO0lBRTFDLFlBQVksTUFBd0M7UUFDbEQsSUFBSSxNQUFNLFlBQVkseUJBQWdCLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakM7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVNLGNBQWMsQ0FBQyxRQUErQztRQUNuRSxJQUFJLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN0RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztTQUMzQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGlEQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQXVCO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSw2REFBNkIsRUFBRSxDQUFDO1NBQ3REO1FBRUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLElB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