"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockBoxes_1 = require("../../../mocks/mockBoxes");
const bigIntUtils_1 = require("../../../utils/bigIntUtils");
const boxUtils_1 = require("../../../utils/boxUtils");
const accumulativeSelectionStrategy_1 = require("./accumulativeSelectionStrategy");
describe("Accumulative selection strategy", () => {
    it("Should return an empty array if empty target: { nanoErgs: 0 }", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        expect(selector.select(mockBoxes_1.regularBoxesMock, { nanoErgs: 0n })).toEqual([]);
    });
    it("Should select inputs for nanoErgs only with target amount", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        const target = { nanoErgs: 10000n };
        const boxes = selector.select(mockBoxes_1.regularBoxesMock, target);
        expect(boxes).toHaveLength(1);
        expect((0, bigIntUtils_1.sumBy)(boxes, (x) => x.value)).toBeGreaterThanOrEqual(10000n);
    });
    it("Should select all inputs with nanoErgs if no target amount is specified", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        const boxes = selector.select(mockBoxes_1.regularBoxesMock, { nanoErgs: undefined });
        expect(boxes).toHaveLength(mockBoxes_1.regularBoxesMock.length);
    });
    it("Should select all inputs with a given token if no target amount is specified", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        const boxes = selector.select(mockBoxes_1.regularBoxesMock, {
            tokens: [{ tokenId: "007fd64d1ee54d78dd269c8930a38286caa28d3f29d27cadcb796418ab15c283" }]
        });
        expect(boxes).toHaveLength(3);
        expect((0, bigIntUtils_1.sumBy)(boxes, (x) => x.value)).toBeGreaterThanOrEqual(10000n);
    });
    it("Should select all inputs with a given token if no target amount is specified - multiple tokenIds", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        const boxes = selector.select(mockBoxes_1.regularBoxesMock, {
            tokens: [
                { tokenId: "007fd64d1ee54d78dd269c8930a38286caa28d3f29d27cadcb796418ab15c283" },
                { tokenId: "0cd8c9f416e5b1ca9f986a7f10a84191dfb85941619e49e53c0dc30ebf83324b" }
            ]
        });
        expect(boxes).toHaveLength(4);
        expect((0, bigIntUtils_1.sumBy)(boxes, (x) => x.value)).toBeGreaterThanOrEqual(10000n);
    });
    it("Should select inputs for tokens", () => {
        const selector = new accumulativeSelectionStrategy_1.AccumulativeSelectionStrategy();
        const target = {
            nanoErgs: 100000n,
            tokens: [
                {
                    tokenId: "0cd8c9f416e5b1ca9f986a7f10a84191dfb85941619e49e53c0dc30ebf83324b",
                    amount: 100n
                },
                {
                    tokenId: "007fd64d1ee54d78dd269c8930a38286caa28d3f29d27cadcb796418ab15c283",
                    amount: 10n
                }
            ]
        };
        const boxes = selector.select(mockBoxes_1.regularBoxesMock, target);
        expect(boxes).toHaveLength(1); // should try to reuse already selected inputs
        expect((0, bigIntUtils_1.sumBy)(boxes, (x) => x.value)).toBeGreaterThanOrEqual(target.nanoErgs);
        expect((0, boxUtils_1.sumByTokenId)(boxes, "0cd8c9f416e5b1ca9f986a7f10a84191dfb85941619e49e53c0dc30ebf83324b")).toBeGreaterThanOrEqual(100n);
        expect((0, boxUtils_1.sumByTokenId)(boxes, "007fd64d1ee54d78dd269c8930a38286caa28d3f29d27cadcb796418ab15c283")).toBeGreaterThanOrEqual(10n);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjdW11bGF0aXZlU2VsZWN0aW9uU3RyYXRlZ3kuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9idWlsZGVyL3NlbGVjdG9yL3N0cmF0ZWdpZXMvYWNjdW11bGF0aXZlU2VsZWN0aW9uU3RyYXRlZ3kuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdEQUE0RDtBQUM1RCw0REFBbUQ7QUFDbkQsc0RBQXVEO0FBQ3ZELG1GQUFnRjtBQUVoRixRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLEVBQUUsQ0FBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7UUFDdkUsTUFBTSxRQUFRLEdBQUcsSUFBSSw2REFBNkIsRUFBRSxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLDRCQUFnQixFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkRBQTJELEVBQUUsR0FBRyxFQUFFO1FBQ25FLE1BQU0sUUFBUSxHQUFHLElBQUksNkRBQTZCLEVBQUUsQ0FBQztRQUNyRCxNQUFNLE1BQU0sR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLDRCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXhELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLElBQUEsbUJBQUssRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FB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