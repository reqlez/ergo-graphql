import { ErgoAddress, InputsCollection, OutputsCollection, TokensCollection } from "../models";
import { Amount, Base58String, Box, EIP12UnsignedTransaction, HexString, TokenAmount, UnsignedTransaction } from "../types";
import { OutputBuilder } from "./outputBuilder";
import { BoxSelector } from "./selector";
import { TransactionBuilderSettings } from "./transactionBuilderSettings";
export declare const RECOMMENDED_MIN_FEE_VALUE = 1100000n;
export declare const FEE_CONTRACT = "1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304";
export declare type SelectorCallback = (selector: BoxSelector) => void;
declare type EjectorContext = {
    inputs: InputsCollection;
    dataInputs: InputsCollection;
    outputs: OutputsCollection;
    burning: TokensCollection | undefined;
    settings: TransactionBuilderSettings;
};
export declare class TransactionBuilder {
    private readonly _inputs;
    private readonly _dataInputs;
    private readonly _outputs;
    private readonly _settings;
    private readonly _creationHeight;
    private _selectorCallback?;
    private _changeAddress?;
    private _feeAmount?;
    private _burning?;
    constructor(creationHeight: number);
    get inputs(): InputsCollection;
    get dataInputs(): InputsCollection;
    get outputs(): OutputsCollection;
    get changeAddress(): ErgoAddress | undefined;
    get fee(): bigint | undefined;
    get burning(): TokensCollection | undefined;
    get settings(): TransactionBuilderSettings;
    get creationHeight(): number;
    from(inputs: Box<Amount>[], selectorCallback?: SelectorCallback): TransactionBuilder;
    to(outputs: OutputBuilder[] | OutputBuilder): TransactionBuilder;
    withDataFrom(dataInputs: Box<Amount>[] | Box<Amount>): TransactionBuilder;
    sendChangeTo(address: ErgoAddress | Base58String | HexString): TransactionBuilder;
    payFee(amount: Amount): TransactionBuilder;
    payMinFee(): TransactionBuilder;
    burnTokens(tokens: TokenAmount<Amount> | TokenAmount<Amount>[]): TransactionBuilder;
    configure(callback: (settings: TransactionBuilderSettings) => void): TransactionBuilder;
    eject(ejector: (context: EjectorContext) => void): TransactionBuilder;
    build(buildOutputType: "default"): UnsignedTransaction;
    build(buildOutputType: "EIP-12"): EIP12UnsignedTransaction;
    build(): UnsignedTransaction;
    private _calcBurningBalance;
    private _calcChangeLength;
    private _calcRequiredNanoErgsForChange;
    private _mapInputs;
    private _calcDiff;
}
export {};
