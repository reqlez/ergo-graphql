"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../errors");
const mockBoxes_1 = require("../../mocks/mockBoxes");
const arrayUtils_1 = require("../../utils/arrayUtils");
const inputsCollection_1 = require("./inputsCollection");
describe("inputs collection", () => {
    it("Should create and empty collection", () => {
        const collection = new inputsCollection_1.InputsCollection();
        expect(collection.isEmpty).toBeTruthy();
    });
    it("Should create a filled collection", () => {
        const collection = new inputsCollection_1.InputsCollection(mockBoxes_1.regularBoxesMock);
        expect(collection).toHaveLength(mockBoxes_1.regularBoxesMock.length);
    });
    it("Should add a single item", () => {
        const collection = new inputsCollection_1.InputsCollection();
        const box = (0, arrayUtils_1.first)(mockBoxes_1.regularBoxesMock);
        collection.add(box);
        expect(collection).toHaveLength(1);
        expect((0, arrayUtils_1.first)(collection.toArray()).boxId).toBe(box.boxId);
    });
    it("Should add a multiple items", () => {
        const collection = new inputsCollection_1.InputsCollection();
        collection.add(mockBoxes_1.regularBoxesMock);
        expect(collection).toHaveLength(mockBoxes_1.regularBoxesMock.length);
        expect(collection.toArray()).toEqual(mockBoxes_1.regularBoxesMock);
    });
    it("Should add a multiple items and map properly", () => {
        const collection = new inputsCollection_1.InputsCollection();
        // include boxes with amounts as string
        collection.add(mockBoxes_1.regularBoxesMock.map((box) => {
            return {
                ...box,
                value: box.value.toString(),
                assets: box.assets.map((asset) => {
                    return { tokenId: asset.tokenId, amount: asset.amount.toString() };
                })
            };
        }));
        expect(collection).toHaveLength(mockBoxes_1.regularBoxesMock.length);
        expect(collection.toArray()).toEqual(mockBoxes_1.regularBoxesMock);
    });
    it("Should throw if box is already included", () => {
        const collection = new inputsCollection_1.InputsCollection(mockBoxes_1.regularBoxesMock);
        expect(() => {
            collection.add((0, arrayUtils_1.first)(mockBoxes_1.regularBoxesMock));
        }).toThrow(errors_1.DuplicateInputError);
    });
    it("Should remove by boxId", () => {
        const collection = new inputsCollection_1.InputsCollection(mockBoxes_1.regularBoxesMock);
        const boxId = (0, arrayUtils_1.first)(mockBoxes_1.regularBoxesMock).boxId;
        collection.remove(boxId);
        expect(collection).toHaveLength(mockBoxes_1.regularBoxesMock.length - 1);
        expect(collection.toArray().find((x) => x.boxId === boxId)).toBeFalsy();
    });
    it("Should remove by index", () => {
        const collection = new inputsCollection_1.InputsCollection(mockBoxes_1.regularBoxesMock);
        const boxId = (0, arrayUtils_1.first)(mockBoxes_1.regularBoxesMock).boxId;
        collection.remove(0);
        expect(collection).toHaveLength(mockBoxes_1.regularBoxesMock.length - 1);
        expect(collection.toArray().find((x) => x.boxId === boxId)).toBeFalsy();
    });
    it("Should throw if not found", () => {
        const collection = new inputsCollection_1.InputsCollection((0, arrayUtils_1.first)(mockBoxes_1.regularBoxesMock));
        const boxId = mockBoxes_1.regularBoxesMock[1].boxId;
        expect(() => {
            collection.remove(boxId);
        }).toThrow(errors_1.NotFoundError);
    });
    it("Should throw if not found", () => {
        const collection = new inputsCollection_1.InputsCollection(mockBoxes_1.regularBoxesMock);
        expect(() => {
            collection.remove(-1);
        }).toThrow(RangeError);
        expect(() => {
            collection.remove(mockBoxes_1.regularBoxesMock.length);
        }).toThrow(RangeError);
        expect(() => {
            collection.remove(100);
        }).toThrow(RangeError);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzQ29sbGVjdGlvbi5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZGVscy9jb2xsZWN0aW9ucy9pbnB1dHNDb2xsZWN0aW9uLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBa0U7QUFDbEUscURBQXlEO0FBQ3pELHVEQUErQztBQUMvQyx5REFBc0Q7QUFFdEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxFQUFFLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQzVDLE1BQU0sVUFBVSxHQUFHLElBQUksbUNBQWdCLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLG1DQUFnQixDQUFDLDRCQUFnQixDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyw0QkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxtQ0FBZ0IsRUFBRSxDQUFDO1FBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUEsa0JBQUssRUFBQyw0QkFBZ0IsQ0FBQyxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsSUFBQSxrQkFBSyxFQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFD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