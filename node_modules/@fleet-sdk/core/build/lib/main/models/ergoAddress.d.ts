/// <reference types="node" />
import { AddressType, Base58String, HexString, Network } from "../types";
/**
 * Ergo address model
 *
 * @example
 * Convert address to ErgoTree hex string
 * ```
 * const address = new Address("9eZ24iqjKywjzAti9RnWWTR3CiNnLJDAcd2MenKodcAfzc8AFTu");
 * console.log(address.ergoTree);
 * ```
 *
 * @example
 * Convert ErgoTree hex string to address string
 * ```
 * const ergoTree = "0008cd026dc059d64a50d0dbf07755c2c4a4e557e3df8afa7141868b3ab200643d437ee7"
 * const address = Address.fromErgoTree(ergoTree).toString();
 * ```
 */
export declare class ErgoAddress {
    readonly bytes: Buffer;
    private readonly _address;
    private get _headByte();
    /**
     * Public key for P2PK address
     */
    get publicKey(): Buffer;
    /**
     * ErgoTree hex string
     */
    get ergoTree(): HexString;
    /**
     * Address network type
     */
    get network(): Network;
    /**
     * Address type
     */
    get type(): AddressType;
    /**
     * New instance from bytes
     * @param bytes Address bytes
     */
    constructor(bytes: Buffer);
    /**
     * New instance from base58 encoded address string
     * @param address Address string
     */
    constructor(address: Base58String);
    /**
     * Create a new checked instance from an address string
     * @param address Address encoded as base58
     */
    static fromBase58(address: Base58String): ErgoAddress;
    /**
     * Create a new checked instance from bytes
     * @param bytes Address bytes
     */
    static fromBytes(bytes: Buffer): ErgoAddress;
    /**
     * Create a new instance from an ErgoTree
     * @param ergoTree ErgoTree hex string
     */
    static fromErgoTree(ergoTree: HexString, network?: Network): ErgoAddress;
    private static _fromP2SErgoTree;
    private static _fromP2PKErgoTree;
    /**
     * Create a new instance from a public key
     * @param publicKey Public key hex string
     */
    static fromPublicKey(publicKey: HexString | Buffer, network?: Network): ErgoAddress;
    /**
     * Validate an address
     * @param address Address buffer or string
     */
    static validate(address: Buffer | HexString): boolean;
    /**
     * Check address validity
     */
    isValid(): boolean;
    /**
     * Encode address as base58 string
     */
    toString(): string;
}
