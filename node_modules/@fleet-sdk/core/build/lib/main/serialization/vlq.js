"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VLQ = void 0;
/**
 * A **variable-length quantity (VLQ)** is a universal code that uses an arbitrary number
 * of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ
 * is essentially a base-128 representation of an unsigned integer with the addition of
 * the eighth bit to mark continuation of bytes. VLQ is identical to LEB128 except in
 * endianness. See the example below.
 */
class VLQ {
    /**
     * Encode a unsigned integer to VLQ bytes
     * @param value unsigned integer
     * @returns VLQ bytes
     */
    static encode(value) {
        // source: https://stackoverflow.com/a/3564685
        if (value === 0) {
            return Buffer.from([value]);
        }
        else if (value < 0) {
            throw new RangeError("Variable Length Quantity not supported for negative numbers");
        }
        const bytes = [];
        do {
            let lower7bits = value & 0x7f;
            value >>= 7;
            if (value > 0) {
                lower7bits |= 0x80;
            }
            bytes.push(lower7bits);
        } while (value > 0);
        return Buffer.from(bytes);
    }
    /**
     * Decode VLQ bytes to an unsigned integer value
     * @param bytes VLQ bytes
     * @returns Unsigned integer value
     */
    static decode(bytes) {
        let value = 0;
        let shift = 0;
        let lower7bits = 0;
        let i = 0;
        do {
            lower7bits = bytes[i++];
            value |= (lower7bits & 0x7f) << shift;
            shift += 7;
        } while ((lower7bits & 0x80) != 0);
        return value;
    }
}
exports.VLQ = VLQ;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmxxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcmlhbGl6YXRpb24vdmxxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7R0FNRztBQUNILE1BQWEsR0FBRztJQUNkOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWE7UUFDaEMsOENBQThDO1FBRTlDLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNmLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDN0I7YUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxJQUFJLFVBQVUsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ3JGO1FBRUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUc7WUFDRCxJQUFJLFVBQVUsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQzlCLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDWixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7Z0JBQ2IsVUFBVSxJQUFJLElBQUksQ0FBQzthQUNwQjtZQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDeEIsUUFBUSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBRXBCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUNoQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsR0FBRztZQUNELFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QixLQUFLLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDO1lBQ3RDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDWixRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUVuQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQWhERCxrQkFnREMifQ==