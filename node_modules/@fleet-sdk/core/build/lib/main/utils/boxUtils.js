"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumBoxes = exports.areRegistersDenselyPacked = exports.sumByTokenId = void 0;
const arrayUtils_1 = require("./arrayUtils");
const bigIntUtils_1 = require("./bigIntUtils");
function sumByTokenId(inputs, tokenId) {
    let acc = 0n;
    if ((0, arrayUtils_1.isEmpty)(inputs)) {
        return acc;
    }
    for (const input of inputs) {
        for (const token of input.assets) {
            if (token.tokenId !== tokenId) {
                continue;
            }
            acc += token.amount;
        }
    }
    return acc;
}
exports.sumByTokenId = sumByTokenId;
const MIN_REGISTER_NUMBER = 4;
const MAX_REGISTER_NUMBER = 9;
function areRegistersDenselyPacked(registers) {
    let lastValueIndex = 0;
    for (let i = MIN_REGISTER_NUMBER; i <= MAX_REGISTER_NUMBER; i++) {
        if (registers[`R${i}`]) {
            if (i === MIN_REGISTER_NUMBER) {
                lastValueIndex = i;
                continue;
            }
            if (i - lastValueIndex > 1) {
                return false;
            }
            lastValueIndex = i;
        }
    }
    return true;
}
exports.areRegistersDenselyPacked = areRegistersDenselyPacked;
function sumBoxes(boxes) {
    const tokens = {};
    let nanoErgs = 0n;
    for (const box of boxes) {
        nanoErgs += (0, bigIntUtils_1.toBigInt)(box.value);
        for (const token of box.assets) {
            tokens[token.tokenId] = (tokens[token.tokenId] || 0n) + (0, bigIntUtils_1.toBigInt)(token.amount);
        }
    }
    return {
        nanoErgs,
        tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
    };
}
exports.sumBoxes = sumBoxes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvYm94VXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQXVDO0FBQ3ZDLCtDQUF5QztBQUV6QyxTQUFnQixZQUFZLENBQUMsTUFBcUIsRUFBRSxPQUFnQjtJQUNsRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLElBQUEsb0JBQU8sRUFBQyxNQUFNLENBQUMsRUFBRTtRQUNuQixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7UUFDMUIsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2hDLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQzdCLFNBQVM7YUFDVjtZQUVELEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFqQkQsb0NBaUJDO0FBRUQsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFDOUIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFFOUIsU0FBZ0IseUJBQXlCLENBQUMsU0FBZ0M7SUFDeEUsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLG1CQUFtQixFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9ELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFpQyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLEtBQUssbUJBQW1CLEVBQUU7Z0JBQzdCLGNBQWMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLFNBQVM7YUFDVjtZQUVELElBQUksQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCxjQUFjLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0tBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFsQkQsOERBa0JDO0FBaUJELFNBQWdCLFFBQVEsQ0FBQyxLQUE0QjtJQUNuRCxNQUFNLE1BQU0sR0FBa0MsRUFBRSxDQUFDO0lBQ2pELElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUVsQixLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtRQUN2QixRQUFRLElBQUksSUFBQSxzQkFBUSxFQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxLQUFLLE1BQU0sS0FBSyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBQSxzQkFBUSxFQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRjtLQUNGO0lBRUQsT0FBTztRQUNMLFFBQVE7UUFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckYsQ0FBQztBQUNKLENBQUM7QUFmRCw0QkFlQyJ9