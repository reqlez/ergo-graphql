import { InvalidRegistersPacking } from "../errors/invalidRegistersPacking";
import { UndefinedCreationHeight } from "../errors/undefinedCreationHeight";
import { UndefinedMintingContext } from "../errors/undefinedMintingContext";
import { ErgoAddress } from "../models";
import { TokensCollection } from "../models/collections/tokensCollection";
import { ByteColl } from "../serialization/sigma/byteColl";
import { first, isEmpty } from "../utils/arrayUtils";
import { toBigInt } from "../utils/bigIntUtils";
import { areRegistersDenselyPacked } from "../utils/boxUtils";
import { isUndefined, removeUndefined } from "../utils/objectUtils";
import { isHex } from "../utils/stringUtils";
export const SAFE_MIN_BOX_VALUE = 1000000n;
export class OutputBuilder {
    _value;
    _address;
    _tokens;
    _creationHeight;
    _registers;
    _minting;
    constructor(value, recipient, creationHeight) {
        this._value = toBigInt(value);
        this._creationHeight = creationHeight;
        this._tokens = new TokensCollection();
        this._registers = {};
        if (typeof recipient === "string") {
            this._address = isHex(recipient)
                ? ErgoAddress.fromErgoTree(recipient)
                : ErgoAddress.fromBase58(recipient);
        }
        else {
            this._address = recipient;
        }
    }
    get value() {
        return this._value;
    }
    get address() {
        return this._address;
    }
    get ergoTree() {
        return this._address.ergoTree;
    }
    get creationHeight() {
        return this._creationHeight;
    }
    get tokens() {
        return this._tokens;
    }
    get additionalRegisters() {
        return this._registers;
    }
    get minting() {
        return this._minting;
    }
    addTokens(tokens, options) {
        if (tokens instanceof TokensCollection) {
            this._tokens.add(tokens.toArray(), options);
        }
        else {
            this._tokens.add(tokens, options);
        }
        return this;
    }
    mintToken(token) {
        this._minting = { ...token, amount: toBigInt(token.amount) };
        return this;
    }
    setCreationHeight(height, options) {
        if (isUndefined(options) ||
            options.replace === true ||
            (options.replace === false && isUndefined(this._creationHeight))) {
            this._creationHeight = height;
        }
        return this;
    }
    setAdditionalRegisters(registers) {
        this._registers = removeUndefined(registers);
        if (!areRegistersDenselyPacked(registers)) {
            throw new InvalidRegistersPacking();
        }
        return this;
    }
    eject(ejector) {
        ejector({ tokens: this._tokens });
    }
    build(transactionInputs) {
        let tokens = this.tokens.toArray();
        if (this.minting) {
            if (isEmpty(transactionInputs)) {
                throw new UndefinedMintingContext();
            }
            if (isEmpty(this.additionalRegisters)) {
                this.setAdditionalRegisters({
                    R4: new ByteColl(Buffer.from(this.minting.name || "", "utf-8")).toString(),
                    R5: new ByteColl(Buffer.from(this.minting.description || "", "utf-8")).toString(),
                    R6: new ByteColl(Buffer.from(this.minting.decimals?.toString() || "0", "utf-8")).toString()
                });
            }
            tokens = [
                {
                    tokenId: first(transactionInputs).boxId,
                    amount: this.minting.amount
                },
                ...tokens
            ];
        }
        if (isUndefined(this.creationHeight)) {
            throw new UndefinedCreationHeight();
        }
        return {
            value: this.value.toString(),
            ergoTree: this.ergoTree,
            creationHeight: this.creationHeight,
            assets: tokens.map((token) => {
                return {
                    tokenId: token.tokenId,
                    amount: token.amount.toString()
                };
            }),
            additionalRegisters: this.additionalRegisters
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0QnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9idWlsZGVyL291dHB1dEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQW1CLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBWTNELE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTdDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLFFBQVEsQ0FBQztBQUUzQyxNQUFNLE9BQU8sYUFBYTtJQUNQLE1BQU0sQ0FBUztJQUNmLFFBQVEsQ0FBYztJQUN0QixPQUFPLENBQW1CO0lBQ25DLGVBQWUsQ0FBVTtJQUN6QixVQUFVLENBQXdCO0lBQ2xDLFFBQVEsQ0FBb0I7SUFFcEMsWUFDRSxLQUFhLEVBQ2IsU0FBZ0QsRUFDaEQsY0FBdUI7UUFFdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFD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