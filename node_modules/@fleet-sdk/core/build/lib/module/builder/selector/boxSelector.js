import { DuplicateInputSelectionError } from "../../errors/duplicateInputSelectionError";
import { InsufficientInputs } from "../../errors/insufficientInputs";
import { InputsCollection } from "../../models";
import { hasDuplicatesBy, isEmpty, orderBy, some } from "../../utils/arrayUtils";
import { sumBy, toBigInt } from "../../utils/bigIntUtils";
import { sumByTokenId } from "../../utils/boxUtils";
import { isDefined } from "../../utils/objectUtils";
import { AccumulativeSelectionStrategy } from "./strategies/accumulativeSelectionStrategy";
import { CustomSelectionStrategy } from "./strategies/customSelectionStrategy";
export class BoxSelector {
    _inputs;
    _strategy;
    _ensureFilterPredicate;
    _inputsSortSelector;
    _inputsSortDir;
    constructor(inputs) {
        if (inputs instanceof InputsCollection) {
            this._inputs = inputs.toArray();
        }
        else {
            this._inputs = inputs;
        }
    }
    defineStrategy(strategy) {
        if (this._isISelectionStrategyImplementation(strategy)) {
            this._strategy = strategy;
        }
        else {
            this._strategy = new CustomSelectionStrategy(strategy);
        }
        return this;
    }
    select(target) {
        if (!this._strategy) {
            this._strategy = new AccumulativeSelectionStrategy();
        }
        const remaining = { ...target };
        let unselected = [...this._inputs];
        let selected;
        if (isDefined(this._ensureFilterPredicate)) {
            const predicate = this._ensureFilterPredicate;
            selected = unselected.filter(predicate);
            unselected = unselected.filter((input) => !predicate(input));
            if (isDefined(remaining.nanoErgs)) {
                remaining.nanoErgs -= sumBy(selected, (input) => input.value);
            }
            if (isDefined(remaining.tokens) && selected.some((input) => !isEmpty(input.assets))) {
                remaining.tokens.forEach((tokenTarget) => {
                    if (tokenTarget.amount) {
                        tokenTarget.amount -= sumByTokenId(selected, tokenTarget.tokenId);
                    }
                });
            }
        }
        else {
            selected = [];
        }
        unselected = this._sort(unselected);
        selected = selected.concat(this._strategy.select(unselected, remaining));
        if (hasDuplicatesBy(selected, (item) => item.boxId)) {
            throw new DuplicateInputSelectionError();
        }
        const unreached = this._getUnreachedTargets(selected, target);
        if (some(unreached)) {
            throw new InsufficientInputs(unreached);
        }
        return selected;
    }
    _getUnreachedTargets(inputs, target) {
        const unreached = {};
        const selectedNanoergs = sumBy(inputs, (input) => input.value);
        if (target.nanoErgs && target.nanoErgs > selectedNanoergs) {
            unreached["nanoErgs"] = target.nanoErgs - selectedNanoergs;
        }
        if (isEmpty(target.tokens)) {
            return unreached;
        }
        for (const tokenTarget of target.tokens) {
            const totalSelected = sumByTokenId(inputs, tokenTarget.tokenId);
            if (isDefined(tokenTarget.amount) && tokenTarget.amount > totalSelected) {
                unreached[tokenTarget.tokenId] = tokenTarget.amount - totalSelected;
            }
        }
        return unreached;
    }
    _sort(inputs) {
        if (!this._inputsSortSelector) {
            return orderBy(inputs, (input) => input.creationHeight, "asc");
        }
        return orderBy(inputs, this._inputsSortSelector, this._inputsSortDir || "asc");
    }
    ensureInclusion(predicate) {
        this._ensureFilterPredicate = predicate;
        return this;
    }
    orderBy(selector, direction) {
        this._inputsSortSelector = selector;
        this._inputsSortDir = direction;
        return this;
    }
    _isISelectionStrategyImplementation(obj) {
        if (obj.select) {
            return true;
        }
        return false;
    }
    static buildTargetFrom(boxes) {
        const tokens = {};
        let nanoErgs = 0n;
        for (const box of boxes) {
            nanoErgs += toBigInt(box.value);
            for (const token of box.assets) {
                tokens[token.tokenId] = (tokens[token.tokenId] || 0n) + toBigInt(token.amount);
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94U2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9ib3hTZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN6RixPQUFPLEVBQXNCLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDekYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBVWhELE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRixPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0YsT0FBTyxFQUFFLHVCQUF1QixFQUFvQixNQUFNLHNDQUFzQyxDQUFDO0FBSWpHLE1BQU0sT0FBTyxXQUFXO0lBQ0wsT0FBTyxDQUFnQjtJQUNoQyxTQUFTLENBQXNCO0lBQy9CLHNCQUFzQixDQUFnQztJQUN0RCxtQkFBbUIsQ0FBZ0M7SUFDbkQsY0FBYyxDQUFvQjtJQUUxQyxZQUFZLE1BQXdDO1FBQ2xELElBQUksTUFBTSxZQUFZLGdCQUFnQixFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pDO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFTSxjQUFjLENBQUMsUUFBK0M7UUFDbkUsSUFBSSxJQUFJLENBQUMsbUNBQW1DLENB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