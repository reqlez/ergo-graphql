import { isEmpty } from "../../../utils/arrayUtils";
import { sumBy } from "../../../utils/bigIntUtils";
import { sumByTokenId } from "../../../utils/boxUtils";
import { isUndefined } from "../../../utils/objectUtils";
/**
 * Accumulative selection strategy accumulates inputs until the target
 * value is reached, skipping detrimental inputs.
 */
export class AccumulativeSelectionStrategy {
    _inputs;
    select(inputs, target) {
        this._inputs = inputs;
        let selection = [];
        if (!isEmpty(target.tokens)) {
            selection = this._selectTokens(target.tokens);
        }
        const selectedNanoErgs = sumBy(selection, (input) => input.value);
        if ((isUndefined(target.nanoErgs) && isEmpty(target.tokens)) ||
            (!isUndefined(target.nanoErgs) && selectedNanoErgs < target.nanoErgs)) {
            const targetAmount = !isUndefined(target.nanoErgs)
                ? target.nanoErgs - selectedNanoErgs
                : undefined;
            selection = selection.concat(this._select(targetAmount));
        }
        return selection;
    }
    _selectTokens(targets) {
        let selection = [];
        for (const target of targets) {
            const targetAmount = !isUndefined(target.amount)
                ? target.amount - sumByTokenId(selection, target.tokenId)
                : undefined;
            if (targetAmount && targetAmount <= 0n) {
                continue;
            }
            selection = selection.concat(this._select(targetAmount, target.tokenId));
        }
        return selection;
    }
    _select(target, tokenId) {
        let acc = 0n;
        let selection = [];
        if (isUndefined(target)) {
            if (tokenId) {
                selection = this._inputs.filter((x) => x.assets.some((asset) => asset.tokenId === tokenId));
            }
            else {
                selection = this._inputs;
            }
        }
        else {
            for (let i = 0; i < this._inputs.length && acc < target; i++) {
                if (tokenId) {
                    for (const token of this._inputs[i].assets) {
                        if (token.tokenId !== tokenId) {
                            continue;
                        }
                        acc += token.amount;
                        selection.push(this._inputs[i]);
                    }
                }
                else {
                    acc += this._inputs[i].value;
                    selection.push(this._inputs[i]);
                }
            }
        }
        if (!isEmpty(selection)) {
            this._inputs = this._inputs.filter((input) => !selection.includes(input));
        }
        return selection;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjdW11bGF0aXZlU2VsZWN0aW9uU3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYnVpbGRlci9zZWxlY3Rvci9zdHJhdGVnaWVzL2FjY3VtdWxhdGl2ZVNlbGVjdGlvblN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUl6RDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sNkJBQTZCO0lBQ2hDLE9BQU8sQ0FBaUI7SUFFaEMsTUFBTSxDQUFDLE1BQXFCLEVBQUUsTUFBdUI7UUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxTQUFTLEdBQWtCLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0M7UUFFRCxNQUFNLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRSxJQUNFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFDckU7WUFDQSxNQUFNLFlBQVksR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUNoRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0I7Z0JBQ3BDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFZCxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sYUFBYSxDQUFDLE9BQW9DO1FBQ3hELElBQUksU0FBUyxHQUFrQixFQUFFLENBQUM7UUFFbEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDNUIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDOUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDO2dCQUN6RCxDQUFDLENBQUMsU0FBUyxDQUFDO1lBRWQsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLEVBQUUsRUFBRTtnQkFDdEMsU0FBUzthQUNWO1lBRUQsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDMUU7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRU8sT0FBTyxDQUFDLE1BQWUsRUFBRSxPQUFpQjtRQUNoRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLFNBQVMsR0FBa0IsRUFBRSxDQUFDO1FBRWxDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLElBQUksT0FBTyxFQUFFO2dCQUNYLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQzthQUM3RjtpQkFBTTtnQkFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUMxQjtTQUNGO2FBQU07WUFDTCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDNUQsSUFBSSxPQUFPLEVBQUU7b0JBQ1gsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRTt3QkFDMUMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTs0QkFDN0IsU0FBUzt5QkFDVjt3QkFFRCxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQzt3QkFDcEIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2pDO2lCQUNGO3FCQUFNO29CQUNMLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDN0IsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO2FBQ0Y7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDM0U7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0YifQ==