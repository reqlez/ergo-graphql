import { NotFoundError } from "../../errors";
import { some } from "../../utils/arrayUtils";
import { isUndefined } from "../../utils/objectUtils";
import { Collection } from "./collection";
export class OutputsCollection extends Collection {
    constructor(outputs) {
        super();
        if (outputs) {
            this.add(outputs);
        }
    }
    _add(outputBuilder) {
        this._items.push(outputBuilder);
    }
    add(outputs) {
        if (!Array.isArray(outputs)) {
            this._add(outputs);
            return this;
        }
        for (const output of outputs) {
            this._add(output);
        }
        return this;
    }
    remove(outputs) {
        let index = -1;
        if (typeof outputs === "number") {
            if (this._isIndexOutOfBounds(outputs)) {
                throw new RangeError(`Index '${outputs}' is out of range.`);
            }
            index = outputs;
        }
        else {
            index = this._items.lastIndexOf(outputs);
            if (this._isIndexOutOfBounds(index)) {
                throw new NotFoundError("The output you are trying to remove is not present in the outputs collection.");
            }
        }
        if (index > -1) {
            this._items.splice(index, 1);
        }
        return this;
    }
    clone() {
        return new OutputsCollection(this._items);
    }
    sum(basis) {
        const tokens = {};
        let nanoErgs = 0n;
        if (basis) {
            if (basis.nanoErgs) {
                nanoErgs = basis.nanoErgs;
            }
            if (some(basis.tokens)) {
                for (const token of basis.tokens) {
                    if (isUndefined(token.amount)) {
                        continue;
                    }
                    tokens[token.tokenId] = (tokens[token.tokenId] || 0n) + token.amount;
                }
            }
        }
        for (const box of this._items) {
            nanoErgs += box.value;
            for (const token of box.tokens) {
                tokens[token.tokenId] = (tokens[token.tokenId] || 0n) + token.amount;
            }
        }
        return {
            nanoErgs,
            tokens: Object.keys(tokens).map((tokenId) => ({ tokenId, amount: tokens[tokenId] }))
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0c0NvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbW9kZWxzL2NvbGxlY3Rpb25zL291dHB1dHNDb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxVQUF5QjtJQUM5RCxZQUFZLE9BQXlDO1FBQ25ELEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUVPLElBQUksQ0FBQyxhQUE0QjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBS00sR0FBRyxDQUFDLE9BQXdDO1FBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbkIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJTSxNQUFNLENBQUMsT0FBK0I7UUFDM0MsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDckMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxVQUFVLE9BQU8sb0JBQW9CLENBQUMsQ0FBQzthQUM3RDtZQUVELEtBQUssR0FBRyxPQUFPLENBQUM7U0FDakI7YUFBTTtZQUNMLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLGFBQWEsQ0FDckIsK0VBQStFLENBQ2hGLENBQUM7YUFDSDtTQUNGO1FBRUQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sR0FBRyxDQUFDLEtBQW9DO1FBQzdDLE1BQU0sTUFBTSxHQUFrQyxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO2dCQUNsQixRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQzthQUMzQjtZQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdEIsS0FBSyxNQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7d0JBQzdCLFNBQVM7cUJBQ1Y7b0JBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztpQkFDdEU7YUFDRjtTQUNGO1FBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzdCLFFBQVEsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3RCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUN0RTtTQUNGO1FBRUQsT0FBTztZQUNMLFFBQVE7WUFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckYsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9