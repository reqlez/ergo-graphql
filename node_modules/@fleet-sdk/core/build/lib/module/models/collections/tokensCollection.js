import { NotFoundError } from "../../errors";
import { InsufficientTokenAmount } from "../../errors/insufficientTokenAmount";
import { MaxTokensOverflow } from "../../errors/maxTokensOverflow";
import { toBigInt } from "../../utils/bigIntUtils";
import { Collection } from "./collection";
export const MAX_TOKENS_PER_BOX = 120;
export class TokensCollection extends Collection {
    constructor(tokens, options) {
        super();
        if (tokens) {
            this.add(tokens, options);
        }
    }
    _add(tokenId, amount, sum) {
        if (sum) {
            for (const token of this._items) {
                if (token.tokenId === tokenId) {
                    token.amount += toBigInt(amount);
                    return;
                }
            }
        }
        if (this._items.length >= MAX_TOKENS_PER_BOX) {
            throw new MaxTokensOverflow();
        }
        this._items.push({ tokenId, amount: toBigInt(amount) });
    }
    add(tokenOrTokens, options) {
        const sum = options ? options.sum : true;
        if (!Array.isArray(tokenOrTokens)) {
            this._add(tokenOrTokens.tokenId, tokenOrTokens.amount, sum);
            return this;
        }
        for (const token of tokenOrTokens) {
            this._add(token.tokenId, token.amount, sum);
        }
        return this;
    }
    remove(tokenIdOrIndex, amount) {
        let index = -1;
        if (typeof tokenIdOrIndex === "number") {
            if (this._isIndexOutOfBounds(tokenIdOrIndex)) {
                throw new RangeError(`Index '${tokenIdOrIndex}' is out of range.`);
            }
            index = tokenIdOrIndex;
        }
        else {
            index = this._items.findIndex((token) => token.tokenId === tokenIdOrIndex);
            if (this._isIndexOutOfBounds(index)) {
                throw new NotFoundError(`TokenId '${tokenIdOrIndex}' not found in assets collection.`);
            }
        }
        if (amount && index > -1) {
            const bigAmount = toBigInt(amount);
            const token = this._items[index];
            if (bigAmount > token.amount) {
                throw new InsufficientTokenAmount(`Insufficient token amount to perform a subtraction operation.`);
            }
            else if (bigAmount < token.amount) {
                token.amount -= bigAmount;
                return this;
            }
        }
        if (index > -1) {
            this._items.splice(index, 1);
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zQ29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY29sbGVjdGlvbnMvdG9rZW5zQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztBQUl0QyxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBK0I7SUFLbkUsWUFBWSxNQUFvRCxFQUFFLE9BQXlCO1FBQ3pGLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFTyxJQUFJLENBQUMsT0FBZ0IsRUFBRSxNQUFjLEVBQUUsR0FBWTtRQUN6RCxJQUFJLEdBQUcsRUFBRTtZQUNQLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDL0IsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtvQkFDN0IsS0FBSyxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBRWpDLE9BQU87aUJBQ1I7YUFDRjtTQUNGO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsRUFBRTtZQUM1QyxNQUFNLElBQUksaUJBQWlCLEVBQUUsQ0FBQztTQUMvQjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFRTSxHQUFHLENBQ1IsYUFBMEQsRUFDMUQsT0FBeUI7UUFFekIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFNUQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELEtBQUssTUFBTSxLQUFLLElBQUksYUFBYSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQzdDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSU0sTUFBTSxDQUFDLGNBQWdDLEVBQUUsTUFBZTtRQUM3RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksT0FBTyxjQUFjLEtBQUssUUFBUSxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUM1QyxNQUFNLElBQUksVUFBVSxDQUFDLFVBQVUsY0FBYyxvQkFBb0IsQ0FBQyxDQUFDO2FBQ3BFO1lBRUQsS0FBSyxHQUFHLGNBQWMsQ0FBQztTQUN4QjthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBRTNFLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLElBQUksYUFBYSxDQUFDLFlBQVksY0FBYyxtQ0FBbUMsQ0FBQyxDQUFDO2FBQ3hGO1NBQ0Y7UUFFRCxJQUFJLE1BQU0sSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFakMsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDNUIsTUFBTSxJQUFJLHVCQUF1QixDQUMvQiwrREFBK0QsQ0FDaEUsQ0FBQzthQUNIO2lCQUFNLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ25DLEtBQUssQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDO2dCQUUxQixPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM5QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIn0=