/**
 * A **variable-length quantity (VLQ)** is a universal code that uses an arbitrary number
 * of binary octets (eight-bit bytes) to represent an arbitrarily large integer. A VLQ
 * is essentially a base-128 representation of an unsigned integer with the addition of
 * the eighth bit to mark continuation of bytes. VLQ is identical to LEB128 except in
 * endianness. See the example below.
 */
export class VLQ {
    /**
     * Encode a unsigned integer to VLQ bytes
     * @param value unsigned integer
     * @returns VLQ bytes
     */
    static encode(value) {
        // source: https://stackoverflow.com/a/3564685
        if (value === 0) {
            return Buffer.from([value]);
        }
        else if (value < 0) {
            throw new RangeError("Variable Length Quantity not supported for negative numbers");
        }
        const bytes = [];
        do {
            let lower7bits = value & 0x7f;
            value >>= 7;
            if (value > 0) {
                lower7bits |= 0x80;
            }
            bytes.push(lower7bits);
        } while (value > 0);
        return Buffer.from(bytes);
    }
    /**
     * Decode VLQ bytes to an unsigned integer value
     * @param bytes VLQ bytes
     * @returns Unsigned integer value
     */
    static decode(bytes) {
        let value = 0;
        let shift = 0;
        let lower7bits = 0;
        let i = 0;
        do {
            lower7bits = bytes[i++];
            value |= (lower7bits & 0x7f) << shift;
            shift += 7;
        } while ((lower7bits & 0x80) != 0);
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmxxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcmlhbGl6YXRpb24vdmxxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxHQUFHO0lBQ2Q7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUNoQyw4Q0FBOEM7UUFFOUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ2YsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksVUFBVSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7U0FDckY7UUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRztZQUNELElBQUksVUFBVSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDOUIsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUNaLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDYixVQUFVLElBQUksSUFBSSxDQUFDO2FBQ3BCO1lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN4QixRQUFRLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFFcEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFhO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixHQUFHO1lBQ0QsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEtBQUssSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUM7WUFDdEMsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUNaLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBRW5DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGIn0=